// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserType {
  PERSONAL
  ORGANIZATION
}

enum Gender {
  MALE
  FEMALE
}

enum Category {
  MUSIC
  CULTURE
}

model User {
  id Int @id @default(autoincrement())
  name String? @db.VarChar(50)
  username String @db.VarChar(30) @unique
  type UserType
  birthday DateTime? @db.Date
  gender Gender?
  adress  String[]
  interests Category[]
  pfp String?
  isPremium Boolean @default(false)
  email String @unique @db.Text
  phone String? @db.Text @unique
  password String? @db.VarChar(100)
  googleId String? @db.Text @unique
  role Role @default(USER)
  refreshToken RefreshToken[]

  createdEvents Event[] @relation("Creator")

  verifyEmailAddressTokens VerifyEmailAddressToken[]
  participatedTo EventParticipation[]

  bookmarkedEvents Bookmark[]
}

model Event {
  id Int @id @default(autoincrement())
  title String @db.VarChar(40)
  description String @db.VarChar(50)
  isPrivate Boolean
  address String
  city  String?
  country String?
  latitude  Float
  longitude Float
  dateTime DateTime

  creatorId Int
  creator User @relation("Creator", fields: [creatorId], references: [id])

  participants EventParticipation[]

  bookmarkedBy Bookmark[]
}

model Bookmark {
  id      Int    @id @default(autoincrement())
  userId  Int
  eventId Int

  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

enum EventInviteStatus {
  PENDING
  ACCEPTED
}

enum EventParticipationStatus {
  PENDING
  ACCEPTED
}

model EventParticipation {
  id Int @id @default(autoincrement())
  eventId Int 
  userId Int 
  status EventParticipationStatus
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}


model SignUpDemandToken {
  id Int @id @default(autoincrement())
  email String @db.VarChar(240)
  type UserType
  username String @db.VarChar(30)
  password  String @db.VarChar(100)
  token Int 
  expiredAt DateTime @default(dbgenerated("NOW() + INTERVAL '1 HOUR'"))
} 

model RefreshToken {
  id Int @id @default(autoincrement())
  token String @unique
  expiredAt DateTime @default(dbgenerated("NOW() + INTERVAL '30 DAY'"))
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerifyEmailAddressToken {
  id Int @id @default(autoincrement())
  token Int @unique
  expiredAt DateTime @default(dbgenerated("NOW() + INTERVAL '1 HOUR'"))
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}